{
  "version": 3,
  "sources": ["../../routes/articles.ts"],
  "sourcesContent": ["import Router, {RouterContext} from \"koa-router\";\nimport bodyParser from \"koa-bodyparser\";\n// Since we are handling articles use a URI that begins with an\nconst router = new Router({prefix: '/api/v1/articles'});\n// Temporarily define some random articles in an array.\n// Later this will come from the DB.\nconst articles = [\n {title:'hello article', fullText:'some text here to fill the body'},\n {title:'another article', fullText:'again here is some text here to fill'}, {title:'coventry university',fullText:'some news about coventry university'}, {title:'smart campus', fullText:'smart campus is coming to IVE'} ];\n// Now we define the handler functions\nconst getAll = async (ctx:RouterContext, next:any) => {\n // Use the response body to send the articles as JSON.\n ctx.body = articles;\n await next();\n}\nconst getById = async (ctx: RouterContext, next: any) => {\n // Get the ID from the route parameters.\n let id = ctx.params.id\n // If it exists then return the article as JSON.\n // Otherwise return a 404 Not Found status code\n if ((id <  articles.length+1) && (id > 0)) {\n ctx.body = articles[id-1];\n } else {\n ctx.status = 404;\n }\n await next();\n}\nconst createArticle = async (ctx: RouterContext, next: any) => {\n // The body parser gives us access to the request body on ctx.request.body.\n // Use this to extract the title and fullText we were sent.\n let {title, fullText} = ctx.request.body;\n // In turn, define a new article for addition to the array.\n let newArticle = {title:title, fullText:fullText};\n articles.push(newArticle);\n // Finally send back appropriate JSON and status code.\n // Once we move to a DB store, the newArticle sent back will now have\n\n ctx.status = 201;\n ctx.body = newArticle;\n await next();\n  }\nconst updateArticle = async (ctx: RouterContext, next: any) => {\n //TODO: edit an article\n}\nconst deleteArticle = async (ctx: RouterContext, next: any) => {\n //TODO: delete an article\n}\n/* Routes are needed to connect path endpoints to handler functions.\n When an Article id needs to be matched we use a pattern to match\n a named route parameter. Here the name of the parameter will be 'id'\n and we will define the pattern to match at least 1 numeral. */\nrouter.get('/', getAll);\nrouter.post('/', bodyParser(), createArticle);\nrouter.get('/:id([0-9]{1,})', getById);\nrouter.put('/:id([0-9]{1,})', updateArticle);\nrouter.del('/:id([0-9]{1,})', deleteArticle);\n// Finally, define the exported object when import from other scripts.\nexport { router };"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,wBAAoC;AACpC,4BAAuB;AAEvB,MAAM,SAAS,IAAI,0BAAO,EAAC,QAAQ;AAGnC,MAAM,WAAW;AAAA,EAChB,EAAC,OAAM,iBAAiB,UAAS;AAAA,EACjC,EAAC,OAAM,mBAAmB,UAAS;AAAA,EAAyC,EAAC,OAAM,uBAAsB,UAAS;AAAA,EAAwC,EAAC,OAAM,gBAAgB,UAAS;AAAA;AAE3L,MAAM,SAAS,OAAO,KAAmB,SAAa;AAErD,MAAI,OAAO;AACX,QAAM;AAAA;AAEP,MAAM,UAAU,OAAO,KAAoB,SAAc;AAExD,MAAI,KAAK,IAAI,OAAO;AAGpB,MAAK,KAAM,SAAS,SAAO,KAAO,KAAK,GAAI;AAC3C,QAAI,OAAO,SAAS,KAAG;AAAA,SAChB;AACP,QAAI,SAAS;AAAA;AAEb,QAAM;AAAA;AAEP,MAAM,gBAAgB,OAAO,KAAoB,SAAc;AAG9D,MAAI,EAAC,OAAO,aAAY,IAAI,QAAQ;AAEpC,MAAI,aAAa,EAAC,OAAa;AAC/B,WAAS,KAAK;AAId,MAAI,SAAS;AACb,MAAI,OAAO;AACX,QAAM;AAAA;AAEP,MAAM,gBAAgB,OAAO,KAAoB,SAAc;AAAA;AAG/D,MAAM,gBAAgB,OAAO,KAAoB,SAAc;AAAA;AAO/D,OAAO,IAAI,KAAK;AAChB,OAAO,KAAK,KAAK,sCAAc;AAC/B,OAAO,IAAI,mBAAmB;AAC9B,OAAO,IAAI,mBAAmB;AAC9B,OAAO,IAAI,mBAAmB;",
  "names": []
}
